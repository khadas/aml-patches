From 6f22f95fb87c2cc332eb6389658e867dfd046cb9 Mon Sep 17 00:00:00 2001
From: "zongren.yin" <zongren.yin@amlogic.com>
Date: Tue, 23 May 2023 16:37:42 +0800
Subject: [PATCH 2/4] mediactrl: fix connect failed [1/1]

PD#SWPL-124306

Problem:
Connect failed before hdmi ctrl listen/accpect

Solution:
Retry 5 times if connect failed.

Fixed conflicts:
NA

Verify:
local t7c build

Signed-off-by: zongren.yin <zongren.yin@amlogic.com>
Change-Id: Ibbed77ff8e6ffbfa483821724090106b6578c218
---
 amlv4l2src/common/common.c | 13 ++++++++++++-
 hdmictrl/hdmictrl.c        |  9 +++++++--
 2 files changed, 19 insertions(+), 3 deletions(-)

diff --git a/amlv4l2src/common/common.c b/amlv4l2src/common/common.c
index fd66750..462b29a 100644
--- a/amlv4l2src/common/common.c
+++ b/amlv4l2src/common/common.c
@@ -42,10 +42,13 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <string.h>
+#include <time.h>
 
 #include "mediactrl_log.h"
 
 int udp_sock_create(const char* server_socket_path) {
+  int retry_max = 5;
+  int retry = 0;
   if (NULL == server_socket_path)
     return -1;
 
@@ -62,8 +65,16 @@ int udp_sock_create(const char* server_socket_path) {
   strncpy(server_unix.sun_path, server_socket_path, sizeof(server_unix.sun_path)-1);
 
   int len = offsetof(struct sockaddr_un, sun_path) + strlen(server_unix.sun_path);
-  if (connect(sockfd, (struct sockaddr *)&server_unix, len) < 0) {
+    struct timespec currentTime;
+    clock_gettime(CLOCK_REALTIME, &currentTime);
+  log_debug("[%ld][%s] start connect", currentTime.tv_nsec, server_unix.sun_path);
+  while (connect(sockfd, (struct sockaddr *)&server_unix, len) < 0 && retry < retry_max) {
     log_error("[%s] connect ...", server_unix.sun_path);
+    usleep(50000);
+    retry++;
+  }
+  if (retry == retry_max) {
+    log_error("[%s] connect failed", server_unix.sun_path);
     return -1;
   }
 
diff --git a/hdmictrl/hdmictrl.c b/hdmictrl/hdmictrl.c
index 0e165f6..493d615 100644
--- a/hdmictrl/hdmictrl.c
+++ b/hdmictrl/hdmictrl.c
@@ -51,6 +51,7 @@
 #include <ctype.h>
 #include <pthread.h>
 #include <signal.h>
+#include <time.h>
 #include "TvClientWrapper.h"
 #include "CTvClientLog.h"
 
@@ -188,7 +189,10 @@ static void hdmi_rx_svctx_perform_connect(hdmi_rx_svc_t *g_t_svctx)
 	  perror("bind error");
 	  exit(1);
 	}
-	log_debug("UNIX domain socket (%s) bound", server_unix.sun_path);
+	struct timespec currentTime;
+	clock_gettime(CLOCK_REALTIME, &currentTime);
+
+	log_debug("[%ld]UNIX domain socket (%s) bound", currentTime.tv_nsec, server_unix.sun_path);
 
 	if (listen(listen_fd, 16) < 0) {
 	  perror("listen error");
@@ -196,7 +200,8 @@ static void hdmi_rx_svctx_perform_connect(hdmi_rx_svc_t *g_t_svctx)
 	}
 
 	client_unix_len = sizeof(client_unix);
-	log_debug("Accepting connections,get the client_unix_len: %d",client_unix_len);
+	clock_gettime(CLOCK_REALTIME, &currentTime);
+	log_debug("[%ld]Accepting connections,get the client_unix_len: %d",currentTime.tv_nsec, client_unix_len);
 
 	if ((connfd = accept(listen_fd, (struct sockaddr *)&client_unix, &client_unix_len)) < 0) {
 	  perror("accept error");
-- 
2.25.1

