From 5a9b612c5f5830e246ca43e1f7ac13fa24e61577 Mon Sep 17 00:00:00 2001
From: "haotian.qu" <haotian.qu@amlogic.com>
Date: Wed, 19 Apr 2023 17:11:00 +0800
Subject: [PATCH] SWUpdate UI: The progress bar displays the total image
 upgrade progress. [1/1]

PD#TV-78875

Problem:
The customer needs to display the
overall image installation progress.

Solution:
Get image numbers and bisect the
length of the progress bar.

Verify:
local

Signed-off-by: haotian.qu <haotian.qu@amlogic.com>
Change-Id: I943cdbb247c6fef5e7a3cdd960d6eb4b53e03ed6
---
 common/event_ui.c               | 42 +++++++++++++++++++++++++++++--
 directfb_ui/aml_directfb_ui.cpp | 44 +++++++++++++++++----------------
 2 files changed, 63 insertions(+), 23 deletions(-)

diff --git a/common/event_ui.c b/common/event_ui.c
index ec80e9b..1c3992e 100644
--- a/common/event_ui.c
+++ b/common/event_ui.c
@@ -73,9 +73,43 @@ static void status_check(lv_refresh_event_t *pdata)
     }
 }
 
+/* Calculate the percentage of total progress */
+static int calc_perc_of_total(struct progress_msg *msg)
+{
+    static int cur_step_base;
+    int cur_perc_convert = 0;
+    int total_percent = 0;
+    static last_cur_step;
+    static last_total_percent;
+
+    /* Calculate how much of each step is a percentage of the total,
+     * Each step is a stage, and the percentage of completed steps plus
+     * the percentage of current steps equals the percentage of total progress.
+     *
+     * cur_step_base is calculated by the current step represents a percentage
+     * of the total step.
+     * cur_perc_convert convert the percentage of the current image to
+     * the total percentage
+     *  */
+    cur_step_base = 100 * (msg->cur_step - 1) / msg->nsteps;
+    cur_perc_convert = msg->cur_percent / msg->nsteps;
+    total_percent = (cur_step_base + cur_perc_convert);
+
+    if ((msg->cur_step == last_cur_step) && (total_percent < last_total_percent)) {
+        //printf("!!!Warning !!!The same step,current total percent less then last total percent !\n");
+        //printf("[cur_step:%d][last_cur_step:%d][total_percent:%d][last_total_percent:%d]\n", msg->cur_step, last_cur_step, total_percent, last_total_percent);
+        return last_total_percent;
+    }
+    last_cur_step = msg->cur_step;
+    last_total_percent = total_percent;
+
+    return total_percent;
+}
+
 void progress_handle(void *data)
 {
     int ret = -1;
+    int percent = 0;
 
     lv_refresh_event_t *pdata = (lv_refresh_event_t *)data;
     ret = progress_ipc_receive(&pdata->fd, &pdata->msg);
@@ -92,11 +126,15 @@ void progress_handle(void *data)
 
     status_check(pdata);
 
-    if (cur_img_percent == pdata->msg.cur_percent) {
+    percent = calc_perc_of_total(&pdata->msg);
+    //printf("[hnd_name:%s][msg_percent:%d][total_percent:%d]", pdata->msg.hnd_name, pdata->msg.cur_percent, percent);
+    //printf("[cur_step:%d][nsteps:%d]\n", pdata->msg.cur_step, pdata->msg.nsteps);
+
+    if (cur_img_percent == percent) {
         return;
     }
 
-    cur_img_percent = pdata->msg.cur_percent;
+    cur_img_percent = percent;
 
     if ((0 != cur_img_percent) && (NULL != pdata->p_bar_refresh)) {
         pdata->p_bar_refresh(pdata->screen, cur_img_percent);
diff --git a/directfb_ui/aml_directfb_ui.cpp b/directfb_ui/aml_directfb_ui.cpp
index e98419d..594b39e 100644
--- a/directfb_ui/aml_directfb_ui.cpp
+++ b/directfb_ui/aml_directfb_ui.cpp
@@ -40,9 +40,6 @@
 
 #define FONT  "/usr/share/directfb-1.7.7/decker.ttf"
 
-/* fixed the front rectangle length by pixel_per_percent */
-int pixel_per_percent = 4;
-
 /* text start position variate */
 int text_start_x = 0;
 int text_start_y = 0;
@@ -75,9 +72,14 @@ void DFBRefrAnim(void *screen, int data)
 {
      IDirectFBSurface *surface = (IDirectFBSurface *)screen;
      int cur_percent = data;
+     //printf("======data:%d=screen width:%d=progress_bar_bg_rect_len:%d====\n", cur_percent, screen_width, progress_bar_bg_rect_len);
 
+     /* Redraw the background rectangle */
+     surface->SetColor(0xEE, 0xEE, 0xEE, 0xFF);
+     surface->FillRectangle(progress_bar_bg_rect_x, progress_bar_bg_rect_y, progress_bar_bg_rect_len, PROGRESS_BAR_BG_RECT_WID);
+     /* Update the bar rectangle */
      surface->SetColor(0xEE, 0x96, 0x11, 0xFF);
-     surface->FillRectangle(progress_bar_front_rect_x, progress_bar_front_rect_y, cur_percent * pixel_per_percent, PROGRESS_BAR_FRONT_RECT_WID);
+     surface->FillRectangle(progress_bar_front_rect_x, progress_bar_front_rect_y, cur_percent * screen_width * 90 / 100 / 100, PROGRESS_BAR_FRONT_RECT_WID);
 }
 
 /* Callback for refrash the text*/
@@ -89,7 +91,7 @@ void DFBRefrText(void *screen, const char *msg)
       * to overwrite the previous font, (text_start_x, text_start_y)
       * in the lower left quarter, so text_start_y need to reduce 20.
        */
-     surface->SetColor(0, 0, 0, 255);
+     surface->SetColor(0x00, 0x00, 0x00, 0xFE);
      surface->FillRectangle(text_start_x, text_start_y - 20, screen_width, 30);
 
      /* Set new font*/
@@ -150,26 +152,26 @@ private:
           surface.Blit( m_image, NULL, x, y );
 
           /*
-           |                                                                   |
-           |Recovering                                                         |
-           |***********************background*******************************   |
-           |*   2                                                       2  *   |
-           |* 2|----------------------front-----------------------------|2 *   |
-           |*  |--------------------------------------------------------|  *   |
-           |*   2                                                       2  *   |
-           |****************************************************************   |
-           |                                                                   |
-           |________________________baseline___________________________________|
+           |                                                                         |
+           |      Recovering                                                         |
+           |<-5%->***********************background*******************************   |
+           |      *   2 pixel                                                    *   |
+           |      *-------------------------front--------------------------------*   |
+           |      *--------------------------------------------------------------*   |
+           |      *   2                                                          *   |
+           |      ****************************************************************   |
+           |                                                                         |
+           |______________________________baseline___________________________________|
            The front rectangle's length should be a multiple of 100 because the
            progress percent is 100, so we can express percentages as integer
            pixels. The background rectangle's start position and length can
            calculated, because the background rectangle is 4 pixels longer than the front rectangle.
            */
           /* adjust the start position of the text, the height is 50 pixels from the baseline */
-          text_start_x = 0;
+          text_start_x = screen_width * 5 / 100;
           text_start_y = screen_height - 50;
           surface.SetFont( font );
-          surface.SetColor(0x80, 0x80, 0xff, 0xff);
+          surface.SetColor(0x80, 0x80, 0xff, 0xFF);
           surface.SetSrcBlendFunction( DSBF_INVSRCALPHA );
           surface.SetDstBlendFunction( DSBF_INVSRCALPHA );
           surface.DrawString ("Recovering", -1, text_start_x, text_start_y, DSTF_NONE);
@@ -178,11 +180,11 @@ private:
           progress_bar_bg_rect_x = text_start_x;
           progress_bar_bg_rect_y = text_start_y + 20;
 
-          /* The background rectangle is 4 pixels longer than the front rectangle, (pixel_per_percent * 100) is the length
-             of front rectangle.
+          /* The background rectangle is 90 percent of the screen length, the same of length as
+             front rectangle.
            */
-          progress_bar_bg_rect_len = (pixel_per_percent * 100) + 4;
-          progress_bar_front_rect_x = progress_bar_bg_rect_x + 2;
+          progress_bar_bg_rect_len = screen_width * 90 / 100;
+          progress_bar_front_rect_x = progress_bar_bg_rect_x;
           progress_bar_front_rect_y = progress_bar_bg_rect_y + 2;
           /* draw background rectangle */
           surface.SetColor(0xEE, 0xEE, 0xEE, 0xFF);
-- 
2.25.1

